@inherits LayoutComponentBase
@using DynamoLeagueBlazor.Client.Shared.NavMenu
@using Microsoft.AspNetCore.Authorization
@using MudBlazor.Services

<MudLayout>
    <MudIcon Icon=@Icons.Outlined.SportsFootball Style="position:absolute; z-index:-1; height: 100vh; width: 100%; opacity: 5%;" Color=Color.Primary></MudIcon>
    <MudAppBar Color=Color.Transparent Elevation=0>
        <a href="/" class="d-flex">
            <img src="logo.PNG" height="50" />
        </a>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick=@(e => OnOpenChanged()) Size=Size.Large />
    </MudAppBar>
    <NavMenu Open=_showNavMenu OnOpenChanged=OnOpenChanged />
    <MudMainContent>
        <MudContainer MaxWidth=MaxWidth.Large Style="padding-bottom: 95px;">
            <UpdateAvailableDetector />
            <ErrorBoundary @ref=_errorBoundary>
                <ChildContent>
                    @Body
                </ChildContent>
                <ErrorContent>
                    <MudAlert Severity=Severity.Error>
                        An error has occured...
                    </MudAlert>
                </ErrorContent>
            </ErrorBoundary>
        </MudContainer>
    </MudMainContent>
    <MudHidden Breakpoint=Breakpoint.LgAndUp>
        <MudAppBar Elevation=3 Bottom=true Class="d-flex align-center justify-center" Color="appBarColor">
            <MudToolBar>
                <MudIconButton Icon=@Icons.Outlined.SupervisedUserCircle Link="/teams" Size=Size.Large Color=buttonColor />
                <MudIconButton Icon=@Icons.Outlined.People Link="/players" Size=Size.Large Color=buttonColor />
                <MudIconButton Icon=@Icons.Outlined.MoneyOff Link="/fines" Size=Size.Large Color=buttonColor />
                <MudIconButton Icon=@Icons.Outlined.FreeCancellation Link="/freeagents" Size=Size.Large Color=buttonColor />
            </MudToolBar>
        </MudAppBar>
    </MudHidden>    
</MudLayout>
<MudDialogProvider CloseButton=true/>

<MudBreakpointProvider />
<MudSnackbarProvider/>
<MudThemeProvider @ref=_mudThemeProvider Theme=_baseTheme IsDarkMode=_isDarkMode />

@code {
    private MudThemeProvider? _mudThemeProvider;
    private bool _isDarkMode;
    private static string[] HeaderFontFamily = new[] { "Graduate", "cursive" };
    private Color buttonColor;
    private Color appBarColor;
    private MudTheme _baseTheme = new MudTheme()
    {
        Typography = new Typography
        {
            Default = new Default { FontFamily = new[] { "Open Sans", "sans-serif" } },
            H1 = new H1 { FontFamily = HeaderFontFamily },
            H2 = new H2 { FontFamily = HeaderFontFamily },
            H3 = new H3 { FontFamily = HeaderFontFamily },
            H4 = new H4 { FontFamily = HeaderFontFamily },
            H5 = new H5 { FontFamily = HeaderFontFamily },
            H6 = new H6 { FontFamily = HeaderFontFamily }
        }
    };
    private ErrorBoundary? _errorBoundary;
    private bool _showNavMenu;

    protected override void OnInitialized()
    {
        buttonColor = _isDarkMode ? Color.Primary : Color.Dark;
        appBarColor = _isDarkMode ? Color.Dark : Color.Primary;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider!.GetSystemPreference();
            StateHasChanged();
        }
    }

    protected override void OnParametersSet()
    {
        _errorBoundary?.Recover();
    }

    private void OnOpenChanged(bool open = true) => _showNavMenu = open;
}
